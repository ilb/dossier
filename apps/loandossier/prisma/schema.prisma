generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Dossier {
  id       Int        @id @default(autoincrement())
  uuid     String     @unique
  name     String?
  createAt DateTime?  @default(now())
  updateAt DateTime?  @updatedAt
  document Document[]
}

model DocumentState {
  id               Int               @id @default(autoincrement())
  code             String            @unique
  name             String?
  createAt         DateTime?         @default(now())
  updateAt         DateTime?         @updatedAt
  documentVersions DocumentVersion[]
}

model DocumentVersion {
  id              Int            @id @default(autoincrement())
  version         Int?
  documentStateId Int?
  documentState   DocumentState? @relation(fields: [documentStateId], references: [id])
  documentId      Int?
  createAt        DateTime?      @default(now())
  updateAt        DateTime?      @updatedAt
  currentDocument Document?      @relation("currentDocumentVersion")
  document        Document?      @relation(fields: [documentId], references: [id])
  errors          Error[]
  pages           Page[]
  verifications   Verification[]
}

model Document {
  id                     Int               @id @default(autoincrement())
  uuid                   String            @unique
  code                   String
  name                   String?
  curentVersionId        Int?              @unique
  dossierId              Int?
  createAt               DateTime?         @default(now())
  updateAt               DateTime?         @updatedAt
  dossier                Dossier?          @relation(fields: [dossierId], references: [id])
  currentDocumentVersion DocumentVersion?  @relation("currentDocumentVersion", fields: [curentVersionId], references: [id])
  errors                 Error[]
  documentVersions       DocumentVersion[]
}

model Page {
  id                Int              @id @default(autoincrement())
  uuid              String           @unique
  data              Json?
  context           Json? //В контекст записываем кеш проверок
  pageNumber        Int?
  isDelete          Boolean          @default(false)
  documentVersionId Int?
  createAt          DateTime?        @default(now())
  updateAt          DateTime?        @updatedAt
  documentVersion   DocumentVersion? @relation(fields: [documentVersionId], references: [id])
  errors            Error[]
}

// Статусы ошибок

model ErrorType {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  description String?
  createAt    DateTime? @default(now())
  updateAt    DateTime? @updatedAt
  errors      Error[]
}

model ErrorState {
  id          Int       @id @default(autoincrement())
  code        String    @unique
  description String?
  createAt    DateTime? @default(now())
  updateAt    DateTime? @updatedAt
  errors      Error[]
}

model Error {
  id                Int              @id @default(autoincrement())
  code              String?
  description       String?
  isArchive         Boolean?         @default(false)
  documentId        Int?
  documentVersionId Int?
  pageId            Int?
  errorTypeId       Int?
  errorStateId      Int?
  createAt          DateTime?        @default(now())
  updateAt          DateTime?        @updatedAt
  document          Document?        @relation(fields: [documentId], references: [id])
  page              Page?            @relation(fields: [pageId], references: [id])
  documentVersion   DocumentVersion? @relation(fields: [documentVersionId], references: [id])
  errorType         ErrorType?       @relation(fields: [errorTypeId], references: [id])
  errorState        ErrorState?      @relation(fields: [errorStateId], references: [id])
}

model Verification {
  id                Int                 @id @default(autoincrement())
  data              Json?
  statusId          Int?
  typeId            Int?
  documentVersionId Int?
  begDate           DateTime?
  endDate           DateTime?
  type              VerificationType?   @relation(fields: [typeId], references: [id])
  status            VerificationStatus? @relation(fields: [statusId], references: [id])
  documentVersion   DocumentVersion?    @relation(fields: [documentVersionId], references: [id])
}

/// Тип проверки
model VerificationType {
  ///Идентификатор
  id            Int            @id @default(autoincrement())
  ///Дата создания
  createdAt     DateTime       @default(now())
  ///Дата модификации
  updatedAt     DateTime?      @updatedAt
  ///Код
  code          String?        @unique @db.VarChar(100)
  ///Наименование
  name          String?        @db.VarChar(255)
  verifications Verification[]
}

/// Статус проверки
model VerificationStatus {
  ///Идентификатор
  id            Int            @id @default(autoincrement())
  ///Дата создания
  createdAt     DateTime       @default(now())
  ///Дата модификации
  updatedAt     DateTime?      @updatedAt
  ///Код
  code          String?        @unique @db.VarChar(100)
  ///Наименование
  name          String?        @db.VarChar(255)
  verifications Verification[]
}
